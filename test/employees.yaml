openapi: 3.0.3
info:
  title: A HAL-Form extension with JSON Validation Schema
  version: '1.0.0-SNAPSHOT'
  description: |
    Examples described at [https://viigit.github.io/schema-forms](https://viigit.github.io/schema-forms/)
tags:
  - name: Collection Workflows
  - name: Resource Workflows
    description: "example workflows 5-8"
  - name: Alternative Option
    description: "Alternative for _GET /employees Accept application/schema+json_ "
servers:
  - url: 'http://example.com/api/v1'
paths:
  /employees:
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    get:
      summary: List of Employees
      operationId: get-employees
      tags:
      - Collection Workflows
      parameters: 
      - $ref: '#/components/parameters/AcceptLanguage'
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema:
                type: string
                example: s8437b6154v76348
              description: To cache resources
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Employees'
            application/prs.hal-forms+json:
              schema:
                $ref: '#/components/schemas/EmployeesTemplates'
            application/schema+json:
              schema:
                $ref: '#/components/schemas/EmployeesJsonSchema'

    post:
      summary: 'Register employee'
      tags:
        - Collection Workflows
      operationId: post-employees
      responses:
        '201':
          description: Created
          content:
            application/hal+json:
              schema:      
                type: object
                properties:
                  _links:
                    $ref: "#/components/schemas/EmployeeLink"
            application/prs.hal-forms+json:
              schema:
                $ref: '#/components/schemas/EmployeesTemplates'
        '400':
          description: |
            Bad Request
            - application/problem+json [IETF rfc 7807](https://tools.ietf.org/rfc/rfc7807.txt)
          content:
            application/problem+json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/EmployeeValidationError'
                  - $ref: '#/components/schemas/EmployeeValidationErrorUpdatedForm'
              examples:
                adapted Form:
                  value:
                    type: https://example.com/validation-error
                    title: Your request parameters didn't validate.
                    invalidProperties:
                      - $id: "#/birthday"
                        reason: must be in the past
                      - $id: "#/email"
                        reason: exists already
                    _templates:
                      addEmployee:
                        title: Add Employee
                        method: POST
                        contentType: application/json
                        jsonSchema:
                          $id: http://example.com/api/v1/employees
                          $schema: https://json-schema.org/draft/2019-09/schema
                          type: object
                          properties:
                            id: {}
                            firstName: {}
                            lastName: {}
                            birthday: {}
                            email:
                              enum:
                                - john.doe-01@example.com
                                - john.doe-a@example.com
                            workload: {}

                just problem+json:
                  value:
                    type: https://example.com/validation-error
                    title: Your request parameters didn't validate.
                    invalidProperties:
                      - $id: "#/birthday"
                        reason: must be in the past
                      - $id: "#/email"
                        reason: exists already
                    
      requestBody:
        content:
          application/prs.hal-forms+json:
            schema:
              $ref: "#/components/schemas/Employee"
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
              
        description: ''
        
  '/employees/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - $ref: '#/components/parameters/AcceptLanguage'
    get:
      summary: Details of an Employee
      tags:
        - Resource Workflows
      operationId: get-employees-id
      responses:
        '200':
          description: Created
    patch:
      summary: Update Employee
      tags:
        - Resource Workflows
      operationId: patch-employees-id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}

    delete:
      summary: Remove Employee
      tags:
        - Resource Workflows
      operationId: delete-employees-id
      responses:
        '204':
          description: Removed

  '/employees/{id}/resign':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - $ref: '#/components/parameters/AcceptLanguage'
    post:
      summary: Resign
      tags:
        - Resource Workflows
      operationId: resign-employees-id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resign"
      responses:
        '204':
          description: Ok Resigned
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /employees.json:
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    get:
      summary: Schema of Employees
      operationId: get-employees-schema
      tags:
      - Alternative Option
      responses:
        '200':
          description: |
            OK
            
            References [_**application/schema+json**_ and _**application/schema-instance+json**_](https://json-schema.org/draft/2019-09/json-schema-core.html#parameter)
          headers:
            ETag:
              schema:
                type: string
                example: s8437b6154v76348
              description: To cache resources
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/EmployeesJsonSchema'
            application/schema-instance+json; schema="http://example.com/api/v1/employees":
              schema:
                $ref: '#/components/schemas/EmployeesJsonSchema'

  /salaries.json:
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    get:
      summary: Schema of Employees's salaries
      operationId: get-salaries-schema
      tags:
      - Alternative Option
      responses:
        '200':
          description: |
            OK
            
            References [_**application/schema+json**_ and _**application/schema-instance+json**_](https://json-schema.org/draft/2019-09/json-schema-core.html#parameter)
          headers:
            ETag:
              schema:
                type: string
                example: s8437b6154v76348
              description: To cache resources
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/SalariesJsonSchema'
            application/schema-instance+json; schema="http://example.com/api/v1/salaries":
              schema:
                $ref: '#/components/schemas/SalariesJsonSchema'

components:

  schemas:

    Employees:
      allOf:
      - type: object
        properties:
          _embedded:
            type: object
            properties:
              employees:
                type: array
                items:
                  $ref: "#/components/schemas/ExistingEmployee"
      - $ref: '#/components/schemas/EmployeesLinks'

    EmployeeId:
      type: object
      properties:
        id:
          type: integer
          example: 1        
    Employee:
      type: object
      properties:
        firstName:
          type: string
          example: John
          minLength: 1
        lastName:
          type: string
          example: Doe
          minLength: 1
        birthday:
          type: string
          format: date
          example: "2000-12-31"
        email:
          type: string
          format: emails
          example: john.doe@example.com
        workload:
          type: string
          enum:
          - PART-TIME
          - PERMANENT
        active:
          type: boolean
          enum:
          - true
          - false
    ExistingEmployee:
      allOf:
      - $ref: "#/components/schemas/EmployeeId"
      - $ref: "#/components/schemas/Employee"
      - $ref: "#/components/schemas/EmployeeLinks"

    EmployeeTemplates:
      type: object
      properties:
        _templates:
          type: object
          properties:
            default:
              type: object
              properties:
                title:
                  type: string
                  example: Employee
                method:
                  type: string
                  example: POST
                contentType: 
                  type: string
                  example: application/json
                jsonSchema:
                  type: object
                  example:
                    $id: "http://example.com/api/v1/employees"
                    $schema: "https://json-schema.org/draft/2019-09/schema"
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1        
                      firstName:
                        type: string
                        example: John
                        minLength: 1
                      lastName:
                        type: string
                        example: Doe
                        minLength: 1
                      birthday:
                        type: string
                        format: date
                        example: 2000-12-31
                      email:
                        type: string
                        format: email
                        example: john.doe@example.com
                      workload:
                        type: boolean
                        oneOf:
                        - const: PART-TIME
                          title: Teilzeit
                        - const: PERMANENT
                          title: Festangestellt
            deleteEmployee:
              type: object
              properties:
                method:
                  type: string
                  example: DELETE

    EmployeesTemplates:
      allOf:
      - $ref: '#/components/schemas/Employees'
      - type: object
        properties:
          _templates:
            type: object
            properties:
              addEmployee:
                type: object
                properties:
                  title:
                    type: string
                    example: Add Employee
                  method:
                    type: string
                    example: POST
                  contentType: 
                    type: string
                    example: application/json
                  jsonSchema:
                    type: object
                    example:
                      $id: "http://example.com/api/v1/employees"
                      $schema: "https://json-schema.org/draft/2019-09/schema"
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1        
                        firstName:
                          type: string
                          example: John
                          minLength: 1
                        lastName:
                          type: string
                          example: Doe
                          minLength: 1
                        birthday:
                          type: string
                          format: date
                          example: 2000-12-31
                        email:
                          type: string
                          format: email
                          example: john.doe@example.com
                        workload:
                          type: string
                          oneOf:
                          - const: PART-TIME
                            title: Teilzeit
                          - const: PERMANENT
                            title: Festangestellt
                        active:
                          type: string
                          oneOf:
                          - const: true
                            title: Active
                          - const: false
                            title: Resigned

    EmployeeLinks:
      type: object
      properties:
        _links:
          type: object
          readOnly: true
          allOf:
          - $ref: "#/components/schemas/EmployeeLink"
          - $ref: "#/components/schemas/LeavesCompany"

    EmployeeLink:
      type: object
      required: 
      - self
      properties:
        self:
          type: object
          required: 
          - href
          properties:
            href:
              type: string
              example: 'http://example.com/employees/1'

    EmployeesLinks:
      type: object
      properties:
        _links:
          type: object
          readOnly: true
          allOf:
          - $ref: "#/components/schemas/EmployeesLink"
          
    EmployeesLink:
      type: object
      required: 
      - self
      properties:
        self:
          type: object
          required: 
          - href
          properties:
            href:
              type: string
              example: 'http://example.com/employees'
              
    LeavesCompany:
      type: object
      properties:
        leavesCompany:
          type: object
          required:
          - href
          properties:
            href:
              type: string
              example: 'http://example.com/employees/1'

    EmployeeValidationError:
      type: object
      properties:
        type:
          type: string
          example: "https://example.com/validation-error"
        title:
          type: string
          example: "Your request parameters didn't validate."
        invalidProperties:
          type: array
          items:
            type: object
            properties:
              "$id":
                type: string
                example: '#/firstName'
              reason:
                type: string
          example:
            - "$id": "#/birthday"
              reason: "must be in the past"
            - "$id": "#/email"
              reason: "exists already"
              
    EmployeeValidationErrorUpdatedForm:
      type: object
      properties:
        _templates:
          type: object
          properties:
            addEmployee:
              type: object
              properties:
                title:
                  type: string
                  example: Add Employee
                method:
                  type: string
                  example: POST
                contentType: 
                  type: string
                  example: application/json
                jsonSchema:
                  type: object
                  example:
                    $id: "http://example.com/api/v1/employees"
                    $schema: "https://json-schema.org/draft/2019-09/schema"
                    type: object
                    properties:
                      id: {}
                      firstName: {}
                      lastName: {}
                      birthday: {}
                      email:
                        enum: 
                        - john.doe-01@example.com
                        - john.doe-a@example.com
                      workload: {}

    EmployeesSchema:
      allOf:
        - type: object
          properties:
            $id:
              type: string
              example: "http://example.com/api/v1/employees"
            $schema:
              type: string
              example: "https://json-schema.org/draft/2019-09/schema"
        - $ref: "#/components/schemas/Employee"
  
    EmployeesJsonSchema:
      type: object
      example:
        $id: "http://example.com/api/v1/employees"
        $schema: "https://json-schema.org/draft/2019-09/schema"
        $defs:
          employeeSalary:
            $anchor: salary
            $id: /api/v1/salaries
          resign:
            $anchor: ResignReason
            type: object
            properties:
              reason:
                type: string
                title: Reason for termination 
                minLength: 10
                maxLength: 100
        type: object
        properties:
          id:
            type: integer
            example: 1
          firstName:
            type: string
            example: John
            minLength: 1
          lastName:
            type: string
            example: Doe
            minLength: 1
          birthday:
            type: string
            format: date
          email:
            type: string
            format: email
          workload:
            type: string
            oneOf:
            - const: PART-TIME
              title: Teilzeit
            - const: PERMANENT
              title: Festangestellt
          active:
            type: boolean
            oneOf:
            - const: true
              title: Active
            - const: false
              title: Resigned

    SalariesJsonSchema:
      type: object
      example:
        $id: "http://example.com/api/v1/salaries"
        $schema: "https://json-schema.org/draft/2019-09/schema"
        type: object
        properties:
          id:
            type: integer
            example: 1        
          baseSalary:
            type: object
            properties:
              ammount:
                type: integer
                example: 1000
              currency:
                type: string
                example: EUR
          payday:
            type: string
            format: date
            example: 2020-02-29

    Resign:
      type: object
      properties:
        reason:
          type: string
          title: Reason for termination 
          example: Opportunity to work abroad
          minLength: 10
          maxLength: 100

    NotUsed:
      type: object

  parameters:
    AcceptLanguage:
      name: Accept-Language
      in: query
      schema:
        type: string
        example: en; fr;q=0.9, de;q=0.8
      description: To localize content
